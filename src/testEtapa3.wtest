import rodados.*
import trafic.*
import dependencias.*
import wollok.game.*


test "Test etapa 3" {
	/*Instancias de la clase Dependencia y su configuración*/
	const deportes = new Dependencia(empleados=45)
	
	/*Instancias de las clases de autos y su configuración */
	const cachito = new ChevroletCorsa(color=rojo, position=game.at(0,0))
	const corsaAzul = new ChevroletCorsa(color=azul, position=game.at(0,0))
	const especial = new AutoEspecial(capacidad=5, velocidadMaxima=160, peso=1200, color=beige)	
	const kwid = new RenaultKwid(tanqueAdicional = true)
	
	/*Agregado de los autos a la flota de la dependencia*/
	deportes.agregarRodado(cachito)
	deportes.agregarRodado(corsaAzul)
	deportes.agregarRodado(especial)
	deportes.agregarRodado(kwid)
	
	/*Creación y configuración de las clases Pedido*/
	const pedido1 = new Pedido()
	const pedido2 = new Pedido()
	const pedido3 = new Pedido()
	
	/*Configuración del pedido1*/
	pedido1.distanciaARecorrer(980)
	pedido1.tiempoMaximo(8)
	pedido1.pasajerosATransportar(4)
	pedido1.coloresIncompatibles(#{azul, negro, rojo, beige})
	
	/*Test al pedido1*/
	assert.notThat(deportes.tenesAutoPara(pedido1))
	
	pedido2.distanciaARecorrer(1000)
	pedido2.tiempoMaximo(8)
	pedido2.pasajerosATransportar(4)
	pedido2.coloresIncompatibles(#{azul, negro, rojo})
	
	/*Test al pedido2*/
	assert.that(deportes.tenesAutoPara(pedido2))
	
	pedido3.distanciaARecorrer(900)
	pedido3.tiempoMaximo(6)
	pedido3.pasajerosATransportar(8)
	pedido3.coloresIncompatibles(#{azul, negro})
	
	/*Test al pedido 3*/
	assert.notThat(deportes.tenesAutoPara(pedido3))
	
	/*Agregado de pedidos al registro la Dependencia*/
	deportes.agregarUnPedido(pedido1)
	deportes.agregarUnPedido(pedido2)
	deportes.agregarUnPedido(pedido3)
	
	/*Test a la dependencia para filtrar los pedidos rechazados*/
	assert.equals(([pedido1, pedido3]), deportes.pedidosRechazados())
	
	/*Test a la dependencia para chequear si el color dado es incompatible con todos los pedidos*/
	assert.that(deportes.esIncompatible(azul))
	assert.notThat(deportes.esIncompatible(rojo))
	assert.that(deportes.esIncompatible(negro))
	assert.notThat(deportes.esIncompatible(beige))
	
	/*Relajación de todos los pedidos de la dependencia*/
	deportes.relajarTodosLosPedidos()
	
	/*Test a la dependencia para relajar a todos sus pedidos*/
	assert.equals(9, pedido1.tiempoMaximo())
	assert.equals(9, pedido2.tiempoMaximo())
	assert.equals(7, pedido3.tiempoMaximo())
	

}